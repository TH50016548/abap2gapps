<?xml version="1.0" encoding="utf-16"?>
<PROG NAME="Z_GAABAP_SETUP_2_REGISTER_USER" VARCL="X" SUBC="1" CNAM="FEMIA" CDAT="20110325" UNAM="FEMIA" UDAT="20110417" VERN="000041" RMAND="001" RLOAD="E" FIXPT="X" SDATE="20110417" STIME="211050" IDATE="20110417" ITIME="211050" UCCHECK="X">
 <textPool>
  <language SPRAS="D">
   <textElement ID="I" KEY="B01" ENTRY="Please enter PIN" LENGTH="16 "/>
   <textElement ID="I" KEY="B02" ENTRY="For which consumer you want to register a user?" LENGTH="47 "/>
   <textElement ID="I" KEY="T01" ENTRY="Please enter a unique user name" LENGTH="31 "/>
   <textElement ID="S" KEY="P_CNAME" ENTRY="D       ." LENGTH="21 "/>
  </language>
  <language SPRAS="E">
   <textElement ID="I" KEY="B01" ENTRY="Please enter PIN" LENGTH="16 "/>
   <textElement ID="I" KEY="B02" ENTRY="For which consumer you want to register a user?" LENGTH="47 "/>
   <textElement ID="I" KEY="T01" ENTRY="Please enter a unique user name" LENGTH="31 "/>
   <textElement ID="R" LENGTH="33 "/>
   <textElement ID="S" KEY="P_CNAME" ENTRY="D       ." LENGTH="21 "/>
  </language>
 </textPool>
 <dynpros>
  <dynpro PROG="Z_GAABAP_SETUP_2_REGISTER_USER" DNUM="9000" TYPE="M" FNUM="9000" BZMX="5 " BZBR="59 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="27 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DGEN="20110325" TGEN="223744" DTEXT="">
   <dynprofield FNAM="%#AUTOTEXT001" DIDX="0005" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="3B" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="Please enter the PIN you received from the OAuth Provider"/>
   <dynprofield FNAM="%#AUTOTEXT002" DIDX="0017" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="17" LINE="02" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="PIN / Verification Code" RES1="                                                                                                                                                                                                                                                        X"/>
   <dynprofield FNAM="PIN" DIDX="0019" FLG1="80" FLG2="02" FLG3="A8" FMB1="00" FMB2="00" LENG="19" LINE="02" COLN="1C" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="?________________________"/>
   <dynprofield FNAM="%#AUTOTEXT003" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="08" LINE="03" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="Password" RES1="                                                                                                                                                                                                                                                        X"/>
   <dynprofield FNAM="PASSWORD" DIDX="0019" FLG1="80" FLG2="02" FLG3="88" FMB1="04" FMB2="00" LENG="19" LINE="03" COLN="1C" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="_________________________"/>
   <dynprofield FNAM="%#AUTOTEXT004" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="2C" LINE="04" COLN="0C" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="(optional, to protect your user credentials)"/>
   <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
   <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE status_9000.
*
PROCESS AFTER INPUT.
  MODULE exit_command_9000 AT EXIT-COMMAND.
  MODULE user_command_9000.</dynproflowsource>
  </dynpro>
 </dynpros>
 <pfstatus>
  <pfstatus_sta CODE="9000" MODAL="P" PFKCODE="000001" BUTCODE="0001" INT_NOTE="PIN"/>
  <pfstatus_fun CODE="CANCEL" TEXTNO="001" TYPE="E" TEXT_TYPE="S" TEXT_NAME="ICON_CANCEL" ICON_ID="@0W@" FUN_TEXT="Cancel"/>
  <pfstatus_fun CODE="SAVE" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SYSTEM_SAVE" ICON_ID="@2L@" FUN_TEXT="Save" INFO_TEXT="Save PIN"/>
  <pfstatus_but PFK_CODE="000001" CODE="0001" NO="01" PFNO="11"/>
  <pfstatus_but PFK_CODE="000001" CODE="0001" NO="02" PFNO="12"/>
  <pfstatus_pfk CODE="000001" PFNO="11" FUNCODE="SAVE" FUNNO="001"/>
  <pfstatus_pfk CODE="000001" PFNO="12" FUNCODE="CANCEL" FUNNO="001"/>
  <pfstatus_set STATUS="9000" FUNCTION="CANCEL"/>
  <pfstatus_set STATUS="9000" FUNCTION="SAVE"/>
  <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000001" MODAL="P" INT_NOTE="PIN"/>
  <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000001" SUB_CODE="0001" MODAL="P" INT_NOTE="PIN"/>
  <pfstatus_tit CODE="9000" TEXT="PIN"/>
 </pfstatus>
 <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  Z_OAUTH_SETUP_2_REGISTER_USER
*&amp;
*&amp;---------------------------------------------------------------------*

*--------------------------------------------------------------------*
*
* The OAuth library (Part of &quot;Twibap: The ABAP Twitter API&quot;)
* Copyright (C) 2010 Uwe Fetzer + SAP Developer Network members
*
* Project home: http://twibap.googlecode.com
*
* Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*--------------------------------------------------------------------*

*&amp;---------------------------------------------------------------------*
*&amp;
*&amp; Step 2:
*&amp; - Register user (run once per user)
*&amp;
*&amp;---------------------------------------------------------------------*

REPORT  z_gaabap_setup_2_register_user.

*--- please adjust if not suits the APIs requirements ---*
CONSTANTS: request_token_url TYPE string
             VALUE &apos;/accounts/OAuthGetRequestToken&apos;
         , authorize_url TYPE string
             VALUE &apos;/accounts/OAuthAuthorizeToken&apos;
         , access_token_url TYPE string
             VALUE &apos;/accounts/OAuthGetAccessToken&apos;
         .

*--------------------------------------------------------------------*
DATA: pin      TYPE string
    , password TYPE string
    .

*--------------------------------------------------------------------*
* selection screen only used in case there exists multiple consumer  *
*--------------------------------------------------------------------*
SELECTION-SCREEN BEGIN OF SCREEN 9010.

SELECTION-SCREEN BEGIN OF BLOCK b2 WITH FRAME TITLE text-b02.
PARAMETERS: p_cname TYPE zoauth_consumer_name.
SELECTION-SCREEN END OF BLOCK b2.

SELECTION-SCREEN END OF SCREEN 9010.

*----------------------------------------------------------------------*
*       CLASS lcl_user_setup DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_user_setup DEFINITION.

  PUBLIC SECTION.
    METHODS: constructor
           , request_token
           , access_token
           .

  PRIVATE SECTION.
    DATA: oauth             TYPE REF TO zcl_oauth
        , parameters        TYPE zoauth_key_value_t
        , oauth_error       TYPE REF TO zcx_oauth_error
        , error_text        TYPE string
        , api_host          TYPE zoauth_api_host
        , api_protocol      TYPE string
        , signature_method  TYPE zoauth_signature_method
        .

    METHODS: set_token
               IMPORTING response_data TYPE string
           , authorize
           , save_user_credentials
              IMPORTING response_data TYPE string
           , get_screen_name
              RETURNING value(screen_name) TYPE string
           .

ENDCLASS.                    &quot;lcl_user_setup DEFINITION

*----------------------------------------------------------------------*
*       CLASS screen_handler DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS screen_handler DEFINITION FINAL.

  PUBLIC SECTION.
    CLASS-DATA: user_setup TYPE REF TO lcl_user_setup.

    CLASS-METHODS: status_9000
                 , exit_command_9000
                 , user_command_9000
                 .

ENDCLASS.                    &quot;screen_handler DEFINITION

*
*******************
START-OF-SELECTION.
*******************
*

  &quot;*--- selection screen only in case there are multiple consumer registered ---*
  SELECT COUNT( * )
    INTO sy-dbcnt
    FROM zoauth_consumer.

  IF sy-dbcnt &gt; 1.
    CALL SELECTION-SCREEN 9010.
  ENDIF.

  CALL SCREEN 9000
    STARTING AT 10 10.

*----------------------------------------------------------------------*
*       CLASS lcl_user_setup IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_user_setup IMPLEMENTATION.

*--------------------------------------------------------------------*
  METHOD constructor.

    TRY .
        oauth = zcl_oauth=&gt;get_instance( ).
        oauth-&gt;read_consumer_pers( p_cname ).
      CATCH zcx_oauth_error INTO oauth_error.
        error_text = oauth_error-&gt;get_text( ).
        MESSAGE error_text TYPE &apos;E&apos;.
    ENDTRY.

    &quot;*--- get API parameters ---*
    api_host             = oauth-&gt;get_api_host( ).

    CASE oauth-&gt;get_api_protocol( ).
      WHEN 1.
        api_protocol = &apos;http://&apos;.
      WHEN 2.
        api_protocol = &apos;https://&apos;.
    ENDCASE.

    signature_method = oauth-&gt;get_signature_method( ).

  ENDMETHOD.                    &quot;constructor

*--------------------------------------------------------------------*
  METHOD request_token.

    DATA: url             TYPE string
        , secret          TYPE string
        , response_data   TYPE string
        .

    FIELD-SYMBOLS: &lt;parameter&gt; TYPE LINE OF zoauth_key_value_t.

    &quot;*--- set oauth parameters ---*
    CLEAR parameters.
    INSERT INITIAL LINE INTO TABLE parameters ASSIGNING &lt;parameter&gt;.
    &lt;parameter&gt;-key = &apos;oauth_callback&apos;.
    &lt;parameter&gt;-value = &apos;oob&apos;.

    INSERT INITIAL LINE INTO TABLE parameters ASSIGNING &lt;parameter&gt;.
    &lt;parameter&gt;-key = &apos;oauth_consumer_key&apos;.
    &lt;parameter&gt;-value = oauth-&gt;get_consumer_key( ).

    INSERT INITIAL LINE INTO TABLE parameters ASSIGNING &lt;parameter&gt;.
    &lt;parameter&gt;-key = &apos;oauth_nonce&apos;.
    &lt;parameter&gt;-value = oauth-&gt;create_nonce( 32 ).

    INSERT INITIAL LINE INTO TABLE parameters ASSIGNING &lt;parameter&gt;.
    &lt;parameter&gt;-key = &apos;oauth_signature_method&apos;.
    &lt;parameter&gt;-value = &apos;HMAC-SHA1&apos;.

    INSERT INITIAL LINE INTO TABLE parameters ASSIGNING &lt;parameter&gt;.
    &lt;parameter&gt;-key = &apos;oauth_timestamp&apos;.
    &lt;parameter&gt;-value = oauth-&gt;create_timestamp( ).

    INSERT INITIAL LINE INTO TABLE parameters ASSIGNING &lt;parameter&gt;.
    &lt;parameter&gt;-key = &apos;oauth_version&apos;.
    &lt;parameter&gt;-value = &apos;1.0&apos;.

    INSERT INITIAL LINE INTO TABLE parameters ASSIGNING &lt;parameter&gt;.
    &lt;parameter&gt;-key = &apos;scope&apos;.
    &lt;parameter&gt;-value = &apos;https%3A%2F%2Fdocs.google.com%2Ffeeds%2F&apos;.

    oauth-&gt;set_parameters( parameters ).

    &quot;*--- create new secret ---*
    secret = oauth-&gt;get_consumer_secret( ).
    oauth-&gt;set_oauth_secret( secret ).

    CONCATENATE
            api_protocol
            api_host
            request_token_url
          INTO url.
    oauth-&gt;set_oauth_url( url ).

    oauth-&gt;sign_message( method = &apos;GET&apos; ).

*    INSERT INITIAL LINE INTO TABLE parameters ASSIGNING &lt;parameter&gt;.
*    &lt;parameter&gt;-key = &apos;oauth_signature&apos;.
*    &lt;parameter&gt;-value = oauth-&gt;percent_encode( secret ).
*

    &quot;*--- send request and recieve token ---*
    url = request_token_url.

    TRY .
        response_data = oauth-&gt;fetchurl( url    = url
                                         method = &apos;GET&apos; ).
      CATCH zcx_oauth_error INTO oauth_error.
        error_text = oauth_error-&gt;get_text( ).
        MESSAGE error_text TYPE &apos;E&apos;.
    ENDTRY.

    set_token( response_data ).

    &quot;*--- logon to OAuth app and recieve PIN code ---*
    authorize( ).

  ENDMETHOD.                    &quot;request_token

*--------------------------------------------------------------------*
  METHOD set_token.

    DATA: data_t             TYPE string_table
        , dummy              TYPE string
        , oauth_token        TYPE string
        , oauth_token_secret TYPE string
        .

    FIELD-SYMBOLS: &lt;data&gt; TYPE string.

    SPLIT response_data AT &apos;&amp;&apos; INTO TABLE data_t.

    LOOP AT data_t
      ASSIGNING &lt;data&gt;.

      IF &lt;data&gt; CS &apos;oauth_token=&apos;.                          &quot;#EC NOTEXT
        SPLIT &lt;data&gt; AT &apos;=&apos; INTO dummy oauth_token.
      ENDIF.

      IF &lt;data&gt; CS &apos;oauth_token_secret=&apos;.                   &quot;#EC NOTEXT
        SPLIT &lt;data&gt; AT &apos;=&apos; INTO dummy oauth_token_secret.
      ENDIF.

    ENDLOOP.

    IF oauth_token IS INITIAL OR oauth_token_secret IS INITIAL.
      WRITE:/ &apos;OAuth token is initial&apos;                      &quot;#EC NOTEXT
           ,/ &apos;Status: error in API, please try again later&apos; &quot;#EC NOTEXT
           .
      RETURN.
    ENDIF.

    oauth-&gt;set_oauth_token( oauth_token ).
    oauth-&gt;set_oauth_token_secret( oauth_token_secret ).

  ENDMETHOD.                    &quot;set_token

*--------------------------------------------------------------------*
  METHOD authorize.

    DATA: oauth_token TYPE string
        , url         TYPE string
        .

    oauth_token = oauth-&gt;get_oauth_token( ).

    &quot;*--- authorize always with SSL ---*
    CONCATENATE
      &apos;https://&apos;                                            &quot;#EC NOTEXT
      api_host
      authorize_url
      &apos;?oauth_token=&apos;
      oauth_token
    INTO url.

    cl_gui_frontend_services=&gt;execute(
      EXPORTING
        document               = url
      EXCEPTIONS
        cntl_error             = 1
        error_no_gui           = 2
        bad_parameter          = 3
        file_not_found         = 4
        path_not_found         = 5
        file_extension_unknown = 6
        error_execute_failed   = 7
        synchronous_failed     = 8
        not_supported_by_gui   = 9
        OTHERS                 = 10
        ).

    IF sy-subrc &lt;&gt; 0.
      WRITE:/ &apos;Probs at execute&apos;.                           &quot;#EC NOTEXT
      RETURN.
    ENDIF.

  ENDMETHOD.                    &quot;authorize

*--------------------------------------------------------------------*
  METHOD access_token.

    DATA: consumer_secret TYPE string
        , token_secret    TYPE string
        , token           TYPE string
        , secret          TYPE string
        , url             TYPE string
        , response_data   TYPE string
        .

    FIELD-SYMBOLS: &lt;parameter&gt; TYPE LINE OF zoauth_key_value_t.

    &quot;*--- set oauth parameters ---*
    CLEAR parameters.

      INSERT INITIAL LINE INTO TABLE parameters ASSIGNING &lt;parameter&gt;.
      &lt;parameter&gt;-key = &apos;oauth_consumer_key&apos;.                 &quot;#EC NOTEXT
      &lt;parameter&gt;-value = oauth-&gt;get_consumer_key( ).

    INSERT INITIAL LINE INTO TABLE parameters ASSIGNING &lt;parameter&gt;.
    &lt;parameter&gt;-key = &apos;oauth_nonce&apos;.                        &quot;#EC NOTEXT
    &lt;parameter&gt;-value = oauth-&gt;create_nonce( 32 ).

    INSERT INITIAL LINE INTO TABLE parameters ASSIGNING &lt;parameter&gt;.
    &lt;parameter&gt;-key = &apos;oauth_signature_method&apos;.             &quot;#EC NOTEXT
    &lt;parameter&gt;-value = &apos;HMAC-SHA1&apos;.

    INSERT INITIAL LINE INTO TABLE parameters ASSIGNING &lt;parameter&gt;.
    &lt;parameter&gt;-key = &apos;oauth_timestamp&apos;.                    &quot;#EC NOTEXT
    &lt;parameter&gt;-value = oauth-&gt;create_timestamp( ).

    token = oauth-&gt;get_oauth_token( ).
    INSERT INITIAL LINE INTO TABLE parameters ASSIGNING &lt;parameter&gt;.
    &lt;parameter&gt;-key = &apos;oauth_token&apos;.                        &quot;#EC NOTEXT
    &lt;parameter&gt;-value = token.

    INSERT INITIAL LINE INTO TABLE parameters ASSIGNING &lt;parameter&gt;.
    &lt;parameter&gt;-key = &apos;oauth_verifier&apos;.                     &quot;#EC NOTEXT
    &lt;parameter&gt;-value = pin.

    INSERT INITIAL LINE INTO TABLE parameters ASSIGNING &lt;parameter&gt;.
    &lt;parameter&gt;-key = &apos;oauth_version&apos;.
    &lt;parameter&gt;-value = &apos;1.0&apos;.

*    INSERT INITIAL LINE INTO TABLE parameters ASSIGNING &lt;parameter&gt;.
*    &lt;parameter&gt;-key = &apos;oauth_callback&apos;.
*    &lt;parameter&gt;-value = &apos;oob&apos;.

    oauth-&gt;set_parameters( parameters ).

    &quot;*--- create new secret ---*
    consumer_secret = oauth-&gt;get_consumer_secret( ).
    token_secret    = oauth-&gt;get_oauth_token_secret( ).

    CONCATENATE
      consumer_secret
      token_secret
    INTO secret.

    oauth-&gt;set_oauth_secret( secret ).

    CONCATENATE
      api_protocol
      api_host
      access_token_url
    INTO url.

    oauth-&gt;set_oauth_url( url ).
    oauth-&gt;sign_message( method = &apos;GET&apos; ).

    &quot;*--- send request and recieve token ---*
    url = access_token_url.

    TRY .
        response_data = oauth-&gt;fetchurl( url    = url
                                         method = &apos;GET&apos; ).
      CATCH zcx_oauth_error INTO oauth_error.
        error_text = oauth_error-&gt;get_text( ).
        MESSAGE error_text TYPE &apos;E&apos;.
    ENDTRY.

    &quot;*--- save user credentials --*
    save_user_credentials( response_data ).

  ENDMETHOD.                    &quot;access_token

*--------------------------------------------------------------------*
  METHOD save_user_credentials.

    DATA: data_t             TYPE string_table
        , dummy              TYPE string
        , oauth_token        TYPE string
        , oauth_token_secret TYPE string
        , screen_name        TYPE string
        , message            TYPE string
        .

    FIELD-SYMBOLS: &lt;data&gt; TYPE string.

    SPLIT response_data AT &apos;&amp;&apos; INTO TABLE data_t.

    LOOP AT data_t
      ASSIGNING &lt;data&gt;.

      IF &lt;data&gt; CS &apos;oauth_token=&apos;.                          &quot;#EC NOTEXT
        SPLIT &lt;data&gt; AT &apos;=&apos; INTO dummy oauth_token.
      ENDIF.

      IF &lt;data&gt; CS &apos;oauth_token_secret=&apos;.                   &quot;#EC NOTEXT
        SPLIT &lt;data&gt; AT &apos;=&apos; INTO dummy oauth_token_secret.
      ENDIF.

      IF &lt;data&gt; CS &apos;screen_name=&apos;.                          &quot;#EC NOTEXT
        SPLIT &lt;data&gt; AT &apos;=&apos; INTO dummy screen_name.
      ENDIF.

    ENDLOOP.

    IF oauth_token IS INITIAL
    OR oauth_token_secret IS INITIAL.
      MESSAGE &apos;API error: OAuth token is initial&apos; TYPE &apos;E&apos;.
    ENDIF.

    &quot;*--- some providers (e.g. Streamwork) don&apos;t deliver the user name ---*
    IF screen_name IS INITIAL.
      screen_name = get_screen_name( ).

      IF screen_name IS INITIAL.  &quot;still initial
        MESSAGE &apos;Values cannot be saved: User name not entered&apos; TYPE &apos;E&apos;.
      ENDIF.
    ENDIF.

    oauth-&gt;set_user_pers(
      consumer_name      = p_cname
      screen_name        = screen_name
      password           = password
      oauth_token        = oauth_token
      oauth_token_secret = oauth_token_secret
      ).

    CONCATENATE
      &apos;Credentials for User&apos;                                &quot;#EC NOTEXT
      screen_name
      &apos;successfully saved&apos;                                  &quot;#EC NOTEXT
    INTO message SEPARATED BY space.

    MESSAGE message TYPE &apos;I&apos;.

  ENDMETHOD.                    &quot;save_user_credentials

*--------------------------------------------------------------------*
  METHOD get_screen_name.

    DATA: fields TYPE TABLE OF sval
        , title  TYPE string
        .

    FIELD-SYMBOLS: &lt;field&gt; TYPE sval.

    title = &apos;Please enter a unique user name&apos;(t01).

    INSERT INITIAL LINE INTO TABLE fields ASSIGNING &lt;field&gt;.
    &lt;field&gt;-tabname     = &apos;ZOAUTH_USER&apos;.                    &quot;#EC NOTEXT
    &lt;field&gt;-fieldname   = &apos;USER_NAME&apos;.                      &quot;#EC NOTEXT
    &lt;field&gt;-field_attr  = &apos;00&apos;.                      &quot;input &quot;#EC NOTEXT

    CALL FUNCTION &apos;POPUP_GET_VALUES&apos;
      EXPORTING
        popup_title = title
      TABLES
        fields      = fields
      EXCEPTIONS
        OTHERS      = 0.

    READ TABLE fields INDEX 1
      ASSIGNING &lt;field&gt;.

    IF &lt;field&gt; IS ASSIGNED.
      screen_name = &lt;field&gt;-value.
    ENDIF.

  ENDMETHOD.                    &quot;get_screen_name

ENDCLASS.                    &quot;lcl_user_setup IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS screen_handler IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS screen_handler IMPLEMENTATION.

*--------------------------------------------------------------------*
  METHOD status_9000.

    IF sy-pfkey &lt;&gt; &apos;9000&apos;.

      CREATE OBJECT user_setup.
      user_setup-&gt;request_token( ).

      SET PF-STATUS &apos;9000&apos;.
      SET TITLEBAR &apos;9000&apos;.
    ENDIF.

  ENDMETHOD.                    &quot;status_9000

*--------------------------------------------------------------------*
  METHOD exit_command_9000.

    LEAVE TO SCREEN 0.

  ENDMETHOD.                    &quot;EXIT_COMMAND_9000

*--------------------------------------------------------------------*
  METHOD user_command_9000.

    DATA: lv_ucomm TYPE syucomm.

    lv_ucomm = sy-ucomm.
    CLEAR sy-ucomm.

    IF lv_ucomm = &apos;SAVE&apos;.
      user_setup-&gt;access_token( ).
      LEAVE TO SCREEN 0.
    ENDIF.

  ENDMETHOD.                    &quot;user_command_9000

ENDCLASS.                    &quot;screen_handler IMPLEMENTATION

*&amp;---------------------------------------------------------------------*
*&amp;      Module  STATUS_9000  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_9000 OUTPUT.

  screen_handler=&gt;status_9000( ).

ENDMODULE.                 &quot; STATUS_9000  OUTPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  EXIT_COMMAND_9000  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE exit_command_9000 INPUT.

  screen_handler=&gt;exit_command_9000( ).

ENDMODULE.                 &quot; EXIT_COMMAND_9000  INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  USER_COMMAND_9000  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_9000 INPUT.

  screen_handler=&gt;user_command_9000( ).

ENDMODULE.                 &quot; USER_COMMAND_9000  INPUT</source>
</PROG>
