<?xml version="1.0" encoding="utf-16"?>
<PROG NAME="ZGAPPS_UPLOAD" VARCL="X" SUBC="1" CNAM="IANNACCI" CDAT="20110620" UNAM="FEMIA" UDAT="20110830" VERN="000046" RMAND="001" RLOAD="E" FIXPT="X" SDATE="20110830" STIME="221721" IDATE="20110830" ITIME="221721" UCCHECK="X">
 <textPool>
  <language SPRAS="E">
   <textElement ID="R" ENTRY="Report ZGAPPS_UPLOAD" LENGTH="20 "/>
  </language>
 </textPool>
 <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZGAPPS_UPLOAD
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*

REPORT  ZGAPPS_UPLOAD.

DATA: lv_file_separator TYPE c,
      input_file_path   TYPE string.

CONSTANTS: lv_default_file_name TYPE string VALUE &apos;test.xlsx&apos;.

PARAMETERS: lv_wkdir  TYPE string.
PARAMETERS: consumer  TYPE  zoauth2_consumer_name default &apos;ABAP2GAPPSCI3&apos;,
            username  TYPE  zoauth2_user_name default &apos;TEST01&apos;.


AT SELECTION-SCREEN ON VALUE-REQUEST FOR lv_wkdir.
  cl_gui_frontend_services=&gt;directory_browse( EXPORTING initial_folder  = lv_wkdir
                                              CHANGING  selected_folder = lv_wkdir ).

INITIALIZATION.
  cl_gui_frontend_services=&gt;get_sapgui_workdir( CHANGING sapworkdir = lv_wkdir ).
  cl_gui_cfw=&gt;flush( ).

START-OF-SELECTION.

  cl_gui_frontend_services=&gt;get_file_separator( CHANGING file_separator = lv_file_separator ).

  CONCATENATE lv_wkdir lv_file_separator lv_default_file_name INTO input_file_path.



DATA lt_bin TYPE TABLE OF x255.
DATA: lv_filelength TYPE I.
data: ls_string type string.

 CALL METHOD cl_gui_frontend_services=&gt;gui_upload
      EXPORTING
        filename                = input_file_path
        filetype                = &apos;BIN&apos;
      IMPORTING
        filelength              = lv_filelength
      CHANGING
        data_tab                = lt_bin
      EXCEPTIONS
        OTHERS                  = 19.
    IF sy-subrc &lt;&gt; 0. &quot;OR lt_bin[] IS INITIAL.
     write / &apos;Error&apos;.
    ELSE.
      DATA: excel_data TYPE xstring.
      CALL FUNCTION &apos;SCMS_BINARY_TO_XSTRING&apos;
      EXPORTING
        input_length = lv_filelength
      IMPORTING
        buffer       = excel_data
      TABLES
        binary_tab   = lt_bin
      EXCEPTIONS
          OTHERS       = 2.
      ls_string = excel_data.
*      CALL FUNCTION &apos;SCMS_BINARY_TO_STRING&apos;
*        EXPORTING
*          input_length = lv_filelength
*        IMPORTING
*          text_buffer  = ls_string
*        TABLES
*          binary_tab   = lt_bin
*        EXCEPTIONS
*          OTHERS       = 2.
      IF sy-subrc &lt;&gt; 0 .
        write / &apos;Error&apos;.
      ELSE.
        DATA: lo_spreadsheet      TYPE REF TO zcl_docs_spreadsheet.

          CREATE OBJECT lo_spreadsheet
            EXPORTING
              i_consumer_name = consumer
              i_user_name     = username.

          lo_spreadsheet-&gt;zif_docs~UPLOAD(  I_DOCUMENT = excel_data
               I_TITLE = &apos;demo1&apos; I_SIZE = lv_filelength ).
      ENDIF.
    ENDIF.
    &quot;SPLIT ls_string AT cl_abap_char_utilities=&gt;cr_lf INTO TABLE ex_raw_tab.


*DATA: TEXT2(255),
*      LENG TYPE I,
*      MESS type string.
*
*OPEN DATASET lv_default_file_name FOR INPUT IN TEXT MODE ENCODING DEFAULT MESSAGE MESS.
*IF SY-SUBRC &lt;&gt; 0.
*  WRITE: &apos;SY-SUBRC:&apos;, SY-SUBRC,
*       / &apos;System Message:&apos;, MESS.
*else.
*  DO.
*  READ DATASET lv_default_file_name INTO TEXT2 LENGTH LENG.
*  WRITE: / SY-SUBRC, TEXT2, LENG.
*  IF SY-SUBRC &lt;&gt; 0.
*    EXIT.
*  ENDIF.
*  ENDDO.
*  CLOSE DATASET lv_default_file_name.
*ENDIF.</source>
</PROG>
